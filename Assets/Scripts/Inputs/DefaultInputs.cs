//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Inputs/DefaultInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInputs"",
    ""maps"": [
        {
            ""name"": ""DefaultMausenKeys"",
            ""id"": ""fa121231-b5a8-4187-86d2-3d71d147a563"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""0d0823ad-3ca8-47a2-952b-44a0ccc7c39c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""e9bae4e2-ed46-4edc-a2f2-6f17fe87f7c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Equipment"",
                    ""type"": ""Button"",
                    ""id"": ""6a5dd1e5-8ff5-42a2-a5f9-f2e1920fa16b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""0eccb1c9-30bd-41dc-bb29-d26182543941"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f3b563a5-e6a7-4d94-afdf-91db6c39495d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6f6512f2-1473-42a0-becf-242aa791ba19"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0f79bf3c-0b24-41d2-b523-b935368c5fd8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4300ba57-dd77-4938-b058-0e334609ac0e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9add5eaa-c290-4b2f-8d32-0b816e544c2b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f2583cc1-f603-42a0-9cb3-6c1e308076e0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0589e761-1fdb-4f77-b858-be14b0e0ec35"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0a6639f2-c911-4bcd-9716-1bee3f381f62"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ade99896-cd18-4f16-8b71-9ce5d2e9db09"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""80f9a6ee-9d03-4da1-b5c3-001913d46e3a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1ea8e7b-b86e-4315-b9ba-5ea4102c0644"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Equipment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8de7ca8-7b37-4160-aeac-bbaefc1a8917"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MousenKeys"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MousenKeys"",
            ""bindingGroup"": ""MousenKeys"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // DefaultMausenKeys
        m_DefaultMausenKeys = asset.FindActionMap("DefaultMausenKeys", throwIfNotFound: true);
        m_DefaultMausenKeys_Move = m_DefaultMausenKeys.FindAction("Move", throwIfNotFound: true);
        m_DefaultMausenKeys_Menu = m_DefaultMausenKeys.FindAction("Menu", throwIfNotFound: true);
        m_DefaultMausenKeys_Equipment = m_DefaultMausenKeys.FindAction("Equipment", throwIfNotFound: true);
        m_DefaultMausenKeys_Interact = m_DefaultMausenKeys.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DefaultMausenKeys
    private readonly InputActionMap m_DefaultMausenKeys;
    private List<IDefaultMausenKeysActions> m_DefaultMausenKeysActionsCallbackInterfaces = new List<IDefaultMausenKeysActions>();
    private readonly InputAction m_DefaultMausenKeys_Move;
    private readonly InputAction m_DefaultMausenKeys_Menu;
    private readonly InputAction m_DefaultMausenKeys_Equipment;
    private readonly InputAction m_DefaultMausenKeys_Interact;
    public struct DefaultMausenKeysActions
    {
        private @DefaultInputs m_Wrapper;
        public DefaultMausenKeysActions(@DefaultInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_DefaultMausenKeys_Move;
        public InputAction @Menu => m_Wrapper.m_DefaultMausenKeys_Menu;
        public InputAction @Equipment => m_Wrapper.m_DefaultMausenKeys_Equipment;
        public InputAction @Interact => m_Wrapper.m_DefaultMausenKeys_Interact;
        public InputActionMap Get() { return m_Wrapper.m_DefaultMausenKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultMausenKeysActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultMausenKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultMausenKeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultMausenKeysActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @Equipment.started += instance.OnEquipment;
            @Equipment.performed += instance.OnEquipment;
            @Equipment.canceled += instance.OnEquipment;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IDefaultMausenKeysActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @Equipment.started -= instance.OnEquipment;
            @Equipment.performed -= instance.OnEquipment;
            @Equipment.canceled -= instance.OnEquipment;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IDefaultMausenKeysActions instance)
        {
            if (m_Wrapper.m_DefaultMausenKeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultMausenKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultMausenKeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultMausenKeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultMausenKeysActions @DefaultMausenKeys => new DefaultMausenKeysActions(this);
    private int m_MousenKeysSchemeIndex = -1;
    public InputControlScheme MousenKeysScheme
    {
        get
        {
            if (m_MousenKeysSchemeIndex == -1) m_MousenKeysSchemeIndex = asset.FindControlSchemeIndex("MousenKeys");
            return asset.controlSchemes[m_MousenKeysSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IDefaultMausenKeysActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnEquipment(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
